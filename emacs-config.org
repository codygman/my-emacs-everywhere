* codygman's workflow
** Load Work/Personal Specific Code
*** Load Environmental Variables From .bashrc
    #+begin_src emacs-lisp
      (use-package exec-path-from-shell
	:init (setq exec-path-from-shell-variables '("PATH" "MANPATH" "EMACSFOR"))
	:config
	(exec-path-from-shell-initialize))
    #+end_src
*** Load ~/{work,personal}.el
   #+begin_src emacs-lisp
     (pcase (getenv "EMACSFOR")
       ("WORK" (load (expand-file-name "work.el" "~")))
       ("PERSONAL" (load (expand-file-name "personal.el" "~")))
       (_ (error "Please set the EMACSFOR variable to WORK or PERSONAL")))
   #+end_src
*** Sanity checks
   #+begin_src emacs-lisp
     (if (eq nil org-agenda-files)
	 (pcase (getenv "EMACSFOR")
	   ("WORK" (error (format "Make sure to set org-agenda-files in: %s" (expand-file-name "work.el" "~"))))
	   ("PERSONAL" (error (format "Make sure to set org-agenda-files in: %s" (expand-file-name "personal.el" "~"))))
	   (_ (error "Please set the EMACSFOR variable to WORK or PERSONAL")))
       )
   #+end_src
** Quality Of Life Improvements
*** Remember lots of history with save-hist mode
    #+begin_src emacs-lisp
      (setq savehist-file (format "%ssavehist" user-emacs-directory))
      (setq savehist-additional-variables
	    '(kill-ring
	      search-ring
	      regexp-search-ring
	      last-kbd-macro
	      kmacro-ring
	      shell-command-history
	      Info-history-list
	      register-alist))
      (savehist-mode 1)
    #+end_src
*** Kill current buffer
    #+begin_src emacs-lisp
      (defun spacemacs/kill-this-buffer (&optional arg)
	"Kill the current buffer.
		  If the universal prefix argument is used then kill also the window."
	(interactive "P")
	(if (window-minibuffer-p)
	    (abort-recursive-edit)
	  (if (equal '(4) arg)
	      (kill-buffer-and-window)
	    (kill-buffer))))
    #+end_src
*** Toggle maximize window
    #+begin_src emacs-lisp
      (defun toggle-maximize-buffer () "Maximize buffer"
	     (interactive)
	     (if (= 1 (length (window-list)))
		 (jump-to-register '_)
	       (progn
		 (window-configuration-to-register '_)
		 (delete-other-windows))))
    #+end_src
*** Moving around windows
    #+begin_src emacs-lisp
      (use-package winum
	:defer t
	:init (winum-mode))
    #+end_src
** Bind Keys With General.el
   #+begin_src emacs-lisp
     (straight-use-package 'general)
     (use-package general
       :config
       (general-evil-setup)
       (general-imap "j"
	 (general-key-dispatch 'self-insert-command
	   :timeout 0.25
	   ;; TODO make this work so jf writes the file when I enter normal mode
	   ;; "f" '(my-write-then-normal-state)
	   "f" 'evil-normal-state))
       (general-create-definer my-leader-def
	 :prefix "C")
       (my-leader-def
	 :states '(normal visual emacs motion)
	 :prefix "SPC"
	 :keymaps 'override
	 :non-normal-prefix "M-SPC"
	 "SPC" '(helm-M-x :which-key "M-x")
	 "ad"  '(dired :which-key "open dired")
	 "ae"  '(eshell :which-key "open eshell")
	 "at"  '(shell :which-key "open terminal")
	 "bb"  '(helm-mini :which-key "buffers list")
	 "bd"  '(spacemacs/kill-this-buffer :which-key "kill-this-buffer")
	 "cl" '(comment-line :which-key "comment line")
	 "eb"  '(ediff-buffers :which-key "ediff buffers")
	 "fed" '(find-dotfile :which-key "go to init.el")
	 "ff"  '(helm-find-files :which-key "find files")
	 "gb" '(magit-blame :which-key "magit blame")
	 "gf" '(magit-find-file :which-key "magit find-file")
	 "gg" '(helm-do-grep-ag :which-key "helm ag (rg)")
	 "gl" '(magit-log-buffer-file :which-key "magit log file")
	 "gs" '(magit-status :which-key "magit status")
	 "gt" '(magit-log-trace-definition :which-key "magit trace definition")
	 "hdd" '(helm-apropos :which-key "apropos at point")
	 "hdf" '(helpful-callable :which-key "describe function")
	 "hdk" '(helpful-key :which-key "describe key")
	 "hdm" '(describe-mode :which-mode "describe mode")
	 "hdv" '(helpful-variable :which-key "describe variable")
	 "hr" '(helm-resume :which-mode "helm resume")
	 "ji"  '(avy-goto-char-in-line :which-key "Jump To Char In Line")
	 "jj"  '(avy-goto-char-timer :which-key "Jump To Char")
	 "jl"  '(avy-goto-line :which-key "Jump To line")
	 "l"  '(tab-bar-select-tab :which-key "switch perspective")
	 "oa"  '(org-agenda-list :which-key "open org agenda list") ;; previously aoa
	 "ocj"  '(org-clock-goto :which-key "jump to current clock")
	 "ocl"  '(org-clock-in-last :which-key "clock in last task")
	 "od"  '(my-day-org-agenda :which-key "open todays org agenda")
	 "ol"  '(org-store-link :which-key "store org link") ;; previously aol
	 "oo"  '(org-agenda :which-key "open org agenda") ;; previously aoo
	 "pb"  '(helm-projectile-switch-to-buffer :which-key "switch buffer")
	 "pf"  '(helm-projectile-find-file :which-key "find files")
	 "pp"  '(helm-projectile-switch-project :which-key "switch project")
	 "pr"  '(helm-show-kill-ring :which-key "show kill ring")
	 "qq"  '(save-buffers-kill-emacs :which-key "quit")
	 "sS"  '(helm-swoop :which-key "helm-swoop")
	 "ss"  '(spacemacs/helm-swoop-region-or-symbol :which-key "helm-swoop-region-or-symbol")
	 "tl" '(toggle-truncate-lines :which-key "truncate lines")
	 "tw" '(whitespace-mode :which-key "show whitespace")
	 "u"   '(universal-argument :which-key "universal-argument")
	 "1" '(winum-select-window-1 :which-key "window 1")
	 "2" '(winum-select-window-2 :which-key "window 2")
	 "3" '(winum-select-window-3 :which-key "window 3")
	 "4" '(winum-select-window-4 :which-key "window 4")
	 "5" '(winum-select-window-5 :which-key "window 5")
	 "6" '(winum-select-window-6 :which-key "window 6")
	 "w-"  '(split-window-below :which-key "split bottom")
	 "w/"  '(split-window-right :which-key "split right")
	 "wd"  '(delete-window :which-key "delete window")
	 "wh"  '(evil-window-move-far-left :which-key "move left")
	 "wj"  '(evil-window-move-very-bottom :which-key "move bottom")
	 "wk"  '(evil-window-move-very-top :which-key "move up")
	 "wl"  '(evil-window-move-far-right :which-key "move right")
	 "wm"  '(toggle-maximize-buffer :which-key "maximize buffer")
	 "wr"  '(winner-redo :which-key "winner redo")
	 "wu"  '(winner-undo :which-key "winner undo")
	 "wx"  '(delete-window :which-key "delete window")
	 )
       )
   #+end_src
** Editor Movement (not more important, but need to configure evil first)
*** vim keybindings via evil 
    #+begin_src emacs-lisp
      (straight-use-package 'evil)
      (use-package evil
	:init
	(setq evil-want-integration t
	      evil-want-keybinding nil
	      evil-want-C-u-scroll t)
	:config
	(setq evil-symbol-word-search t)
	(evil-mode 1)
	(straight-use-package 'evil-collection))
    #+end_src
*** but sometimes evil bindings don't yet exist for all X emacs-modes so
*** pervasive evil bindings crowd-sourced through evil-collection
    #+begin_src emacs-lisp
      (use-package evil-collection
	:after evil
	:config
	(evil-collection-init))
    #+end_src
*** Default to search, but use avy for more precise character/line hopping
    #+begin_src emacs-lisp
    (straight-use-package 'avy)
    (use-package avy)
    #+end_src
** Life Management/Calendaring/Diary with org
*** org has to be installed in init.el to ensure emacs config tangled with newest org-mode
*** but the rest of the configuration can be handled here
*** evil org bindings
    #+begin_src emacs-lisp
      (straight-use-package 'evil-org)
      (use-package evil-org
	:after org
	:config
	(add-hook 'org-mode-hook 'evil-org-mode)
	(add-hook 'evil-org-mode-hook
		  (lambda ()
		    (evil-org-set-key-theme)))
	(require 'evil-org-agenda)
	(evil-org-agenda-set-keys)
	;; not working, see https://github.com/Somelauw/evil-org-mode/issues/61
	(evil-define-key 'motion evil-org-mode-map
	  (kbd "i") 'org-agenda-clock-in
	  (kbd "o") 'org-agenda-clock-out
	  (kbd "x") 'org-agenda-clock-cancel
	  (kbd "I") 'org-agenda-diary-entry
	  (kbd "O") 'delete-other-windows
	  (kbd "X") 'org-agenda-bulk-action))
    #+end_src
*** general org configuration
    #+begin_src emacs-lisp
      (straight-use-package 'org)
      (use-package org
	:straight org-plus-contrib
	:config
	;; org-agenda-files are set in ~/personal.el
	)
    #+end_src
*** Navigation Between Org Headings
**** Org Most Recently Clocked Items 
     #+begin_src emacs-lisp
       (use-package org-mru-clock
	 :general
	 :after org
	 :config
	 (setq org-mru-clock-how-many 100
	       org-mru-clock-keep-formatting t
	       org-mru-clock-completing-read #'helm-comp-read))
     #+end_src
*** Archival of external items with org-download
    #+begin_src emacs-lisp
      (use-package org-download
	:after cl
	:config
	(setq org-image-actual-width nil) ;; think necessary for 500 to take effect
	(setq org-download-image-org-width 400)
	(setq org-download-annotate-function 'ignore)
	(setq org-download-annotate-function (lambda (_link) ""))

	(setq org-download-screenshot-method
	      (case system-type (gnu/linux "import %s") (darwin "screencapture -i %s")))
	(setq-default org-download-image-dir "~/org/images/screenshots/")
	(add-hook 'dired-mode-hook 'org-download-enable))
    #+end_src
*** org agenda configuration
    #+begin_src emacs-lisp
      (use-package org-agenda
	:after general
	:straight org-plus-contrib
	:init
	(defun my-day-org-agenda ()
	  (interactive)
	  (let ((org-agenda-span 'day))
	    (org-agenda nil "a")
	    (progn (switch-to-buffer "*Org Agenda*") (delete-other-windows))
	    ))
	:general
	(my-leader-def
	  :states '(normal)
	  :prefix "SPC"
	  :keymaps 'override
	  :non-normal-prefix "M-SPC"
	  "od" '(my-day-org-agenda :which-key "Todays Agenda"))
	:config
	(setq org-agenda-bulk-custom-functions
	      `((?D (lambda () (call-interactively 'org-agenda-date-later)))
		,@org-agenda-bulk-custom-functions)))
    #+end_src
** Version Control With Magit
   #+begin_src emacs-lisp
     (use-package evil-magit :after (evil magit))
     (defmacro after-evil (&rest body)
       `(eval-after-load "evil"
	  (lambda ()
	    ,@body)))
     (use-package magit
       :defer t
       :commands (magit-toplevel magit-status magit-blame magit-log)
       :config
       (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
       (after-evil
	(evil-define-key 'normal magit-log-mode-map
	  (kbd "`") 'magit-process-buffer
	  (kbd "~") 'magit-diff-default-context
	  (kbd "0") 'evil-digit-argument-or-evil-beginning-of-line
	  (kbd "$") 'evil-end-of-line)
	(evil-define-key 'normal magit-status-mode-map
	  (kbd "q") 'quit-window
	  (kbd "`") 'magit-process-buffer
	  (kbd "~") 'magit-diff-default-context
	  (kbd "0") 'evil-digit-argument-or-evil-beginning-of-line
	  (kbd "$") 'evil-end-of-line
	  (kbd "Q") 'delete-window)
	(evil-define-key 'normal magit-repolist-mode-map
	  (kbd "q") 'quit-window
	  (kbd "Q") 'delete-window
	  (kbd "RET") 'magit-repolist-status
	  (kbd "gr") 'magit-list-repositories)))
   #+end_src

   #+RESULTS:
   : t

** Project Navigation: Death to filesystem trees!
** Automate The Boring Stuff With Snippets
** Layout/Workspace Managment
*** Undo/Redo Layouts: A winning idea
** Narrowing Framework (fuzzy find-ish everywhere)
*** helm provides the basis 
    #+begin_src emacs-lisp
      (straight-use-package 'helm)
      (use-package helm
	:init
	(setq helm-grep-ag-command "rg --color=always --smart-case --no-heading --line-number %s %s %s")
	:config
	(helm-mode 1)
	(straight-use-package 'helm-swoop)
	(use-package helm-swoop))
    #+end_src
** Literate Programming
**** test that noweb examples work
**** test that my library of babel provides things I expect in workflow
** Literate Work Log
**** log command line outputs transparently when :log present (autolog)
** Visuals
*** theme
#+begin_src emacs-lisp
    (use-package solarized-theme ;; doom-themes
      :if window-system
      :init
      (defun codygman/solarized-theme-modifications (&rest args)
	(set-cursor-color "#b58900"))
      (advice-add 'load-theme :after 'codygman/solarized-theme-modifications)
      :config
      (load-theme 'solarized-dark t))
#+end_src
*** Org mode
    #+begin_src emacs-lisp
      (use-package org-bullets
	:init
	;; (setq org-bullets-bullet-list '("◉" "◎" "✸" "○" "►" "◇"))
	;; (setq org-bullets-bullet-list '("◉" "○" "✸" "✿"))
	(setq org-bullets-bullet-list '("◉" "◎" "○" "►" "◇"))
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+end_src
*** font
    #+begin_src emacs-lisp
      (set-face-attribute 'default nil :family "Source Code Pro" :height 160 :width 'normal)
      (set-face-attribute 'fixed-pitch nil :family "Source Code Pro" :height 140 :width 'normal)
      (set-face-attribute 'variable-pitch nil :family "Source Sans Pro" :height 160 :weight 'medium)
      (set-face-attribute 'org-table nil :inherit 'fixed-pitch) ;; here or org?
      ;; all org blocks should be fixed-width NOTE: For source-blocks ‘org-src-block-faces’ takes precedence.
      (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
    #+end_src
*** readability
**** word wrapping 
     #+begin_src emacs-lisp
     (global-visual-line-mode 1)
     (setq-default fill-column 125)
     #+end_src
*** hide things that annoy me
** Saner defaults
   #+begin_src emacs-lisp
	 (display-time)
	 (blink-cursor-mode 0)
	 (fset 'yes-or-no-p 'y-or-n-p)
	 (setq ring-bell-function 'ignore)
	 ;; don't stop in instrumented forms unless there is a breakpoint
	 ;; enables things working normally even after instrumenting but allowing you to stop somewhere specific w/ a breakpoint
	 ;; eh need to revisit this and see if it's what I actually want
	 (setq edebug-initial-mode 'go)

	 ;; org mode large files super slow without doing this
	 (setq-default bidi-paragraph-direction nil)
	 ;; make things I copy in my OS be pushed into the emacs kill-ring searchable by helm-show-kill-ring
	 (setq save-interprogram-paste-before-kill t)

	 ;; fix term mode stuff
	 (eval-after-load "term"
	   '(progn
	      ;; Fix forward/backward word when (term-in-char-mode).
	      (define-key term-raw-map (kbd "<M-left>")
		(lambda () (interactive) (term-send-raw-string "\eb")))
	      (define-key term-raw-map (kbd "<M-left>")
		(lambda () (interactive) (term-send-raw-string "\eb")))
	      (define-key term-raw-map (kbd "<C-right>")
		(lambda () (interactive) (term-send-raw-string "\ef")))
	      (define-key term-raw-map (kbd "<M-right>")
		(lambda () (interactive) (term-send-raw-string "\ef")))
	      ;; Disable killing and yanking in char mode (term-raw-map).
	      (mapc
	       (lambda (func)
		 (eval `(define-key term-raw-map [remap ,func]
			  (lambda () (interactive) (ding)))))
	       '(backward-kill-paragraph
		 backward-kill-sentence backward-kill-sexp backward-kill-word
		 bookmark-kill-line kill-backward-chars kill-backward-up-list
		 kill-forward-chars kill-line kill-paragraph kill-rectangle
		 kill-region kill-sentence kill-sexp kill-visual-line
		 kill-whole-line kill-word subword-backward-kill subword-kill
		 yank yank-pop yank-rectangle))))

	 (if (display-graphic-p)
	     (progn
	       (scroll-bar-mode -1)
	       (tool-bar-mode   -1)
	       (tooltip-mode    -1)
	       (menu-bar-mode   -1))
	   (message "in terminal"))

	 ;; used with helm-mark-ring
	 (setq mark-ring-max 1000)

	 ;; gpg stuff
	 (setq epg-gpg-program "gpg2")
	 (setf epa-pinentry-mode 'loopback) ;; necessary for this to work with osx/emacs

	 ;; enable winner-mode
	 (when (fboundp 'winner-mode)
	   (winner-mode 1))

	 (global-auto-revert-mode)
	 ;; Also auto refresh dired, but be quiet about it
	 (setq global-auto-revert-non-file-buffers t)
	 (setq auto-revert-verbose nil)

	 (add-to-list 'default-frame-alist '(width . 80))
	 ;; always follow symlinks and DONT PROMPT ME
	 (setq vc-follow-symlinks t)

	 ;; Other configs
       (setq backup-by-copying t      ; don't clobber symlinks
	     backup-directory-alist '(("." . "~/.emacs-saves/"))    ; don't litter my fs tree
	     delete-old-versions t
	     kept-new-versions 6
	     kept-old-versions 2
	     version-control t)       ; use versioned backups
       (setq auto-save-file-name-transforms
	     `((".*" "~/.emacs-saves/" t)))

	 ;; Splash Screen
	 (setq inhibit-startup-screen t)
	 (setq initial-scratch-message nil)

	 ;; Show matching parens
	 (setq show-paren-delay 0)
	 (show-paren-mode  1)
   #+end_src
** Make Help A Little More Helpful
   #+begin_src emacs-lisp
     (straight-use-package 'helpful)
     (use-package helpful)
   #+end_src
** TBD
** TBD
** TBD
* TODO make my-emacs-everywhere use literate test that gets tangled
