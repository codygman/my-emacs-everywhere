* minimal literate config
#+begin_src emacs-lisp
 (straight-use-package 'use-package)
 (straight-use-package 'with-simulated-input)
 (use-package with-simulated-input)
 (straight-use-package 'helm)
 (use-package helm)
#+end_src
* Core-ish things that need to happen first
** init file to write to ~/.emacs.d/init.el before bootstrap
#+begin_src elisp :tangle ~/.emacs.d/init.el :eval no
    ;; add MELPA package server
    (require 'package)
  (setq package-enable-at-startup nil)
    (setq package-archives '(("org"   . "http://orgmode.org/elpa/")
                             ("gnu"   . "http://elpa.gnu.org/packages/")
                             ("melpa" . "https://melpa.org/packages/")))
    (unless package-archive-contents
      (package-refresh-contents))

    (package-initialize)
  (message "package initialize finished")

    ;; straight.el setup
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))



    ;; if not yet installed, install package use-package
    ;; (unless (package-installed-p 'use-package)
    ;;   (package-install 'use-package))

    ;; load org package and our emacs-config.org file
    ;; BEGIN hacky install org mode
    (require 'subr-x)
    (straight-use-package 'git)

    (defun org-git-version ()
      "The Git version of org-mode.
    Inserted by installing org-mode or when a release is made."
      (require 'git)
      (let ((git-repo (expand-file-name
                       "straight/repos/org/" user-emacs-directory)))
        (string-trim
         (git-run "describe"
                  "--match=release\*"
                  "--abbrev=6"
                  "HEAD"))))

    (defun org-release ()
      "The release version of org-mode.
    Inserted by installing org-mode or when a release is made."
      (require 'git)
      (let ((git-repo (expand-file-name
                       "straight/repos/org/" user-emacs-directory)))
        (string-trim
         (string-remove-prefix
          "release_"
          (git-run "describe"
                   "--match=release\*"
                   "--abbrev=0"
                   "HEAD")))))

    (provide 'org-version)

    (straight-use-package 'org-plus-contrib) ; or org-plus-contrib if desired
    ;; END hacky install org mode
    (org-babel-load-file "~/.emacs.d/emacs-config.org")
#+end_src
** changes to vanilla emacs
#+begin_src emacs-lisp
    ;; Package configs
    ;; (require 'package)
    (require 'cl)
    ;; (package-initialize)

    (display-time)
    (blink-cursor-mode 0)
    (fset 'yes-or-no-p 'y-or-n-p)
    (setq ring-bell-function 'ignore)
    ;; don't stop in instrumented forms unless there is a breakpoint
    ;; enables things working normally even after instrumenting but allowing you to stop somewhere specific w/ a breakpoint
    ;; eh need to revisit this and see if it's what I actually want
    (setq edebug-initial-mode 'go)

    ;; org mode large files super slow without doing this
    (setq-default bidi-paragraph-direction nil)
    ;; make things I copy in my OS be pushed into the emacs kill-ring searchable by helm-show-kill-ring
    (setq save-interprogram-paste-before-kill t)

    ;; fix term mode stuff
    (eval-after-load "term"
      '(progn
         ;; Fix forward/backward word when (term-in-char-mode).
         (define-key term-raw-map (kbd "<M-left>")
           (lambda () (interactive) (term-send-raw-string "\eb")))
         (define-key term-raw-map (kbd "<M-left>")
           (lambda () (interactive) (term-send-raw-string "\eb")))
         (define-key term-raw-map (kbd "<C-right>")
           (lambda () (interactive) (term-send-raw-string "\ef")))
         (define-key term-raw-map (kbd "<M-right>")
           (lambda () (interactive) (term-send-raw-string "\ef")))
         ;; Disable killing and yanking in char mode (term-raw-map).
         (mapc
          (lambda (func)
            (eval `(define-key term-raw-map [remap ,func]
                     (lambda () (interactive) (ding)))))
          '(backward-kill-paragraph
            backward-kill-sentence backward-kill-sexp backward-kill-word
            bookmark-kill-line kill-backward-chars kill-backward-up-list
            kill-forward-chars kill-line kill-paragraph kill-rectangle
            kill-region kill-sentence kill-sexp kill-visual-line
            kill-whole-line kill-word subword-backward-kill subword-kill
            yank yank-pop yank-rectangle))))

    (if (display-graphic-p)
        (progn
          (scroll-bar-mode -1)
          (tool-bar-mode   -1)
          (tooltip-mode    -1)
          (menu-bar-mode   -1))
      (message "in terminal"))

    ;; used with helm-mark-ring
    (setq mark-ring-max 1000)

    ;; gpg stuff
    (setq epg-gpg-program "gpg2")
    (setf epa-pinentry-mode 'loopback) ;; necessary for this to work with osx/emacs

    ;; enable winner-mode
    (when (fboundp 'winner-mode)
      (winner-mode 1))

    (global-auto-revert-mode)
    ;; Also auto refresh dired, but be quiet about it
    (setq global-auto-revert-non-file-buffers t)
    (setq auto-revert-verbose nil)

    (add-to-list 'default-frame-alist '(width . 80))
    ;; always follow symlinks and DONT PROMPT ME
    (setq vc-follow-symlinks t)

    ;; Other configs
  (setq backup-by-copying t      ; don't clobber symlinks
        backup-directory-alist '(("." . "~/.emacs-saves/"))    ; don't litter my fs tree
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)       ; use versioned backups
  (setq auto-save-file-name-transforms
        `((".*" "~/.emacs-saves/" t)))

    ;; Splash Screen
    (setq inhibit-startup-screen t)
    (setq initial-scratch-message nil)

    ;; Show matching parens
    (setq show-paren-delay 0)
    (show-paren-mode  1)

    ;; make sure windows always split vertically (hopefully I actually want this)
    ;; I definitely don't want it with split width threshold 0
    ;; (setq split-height-threshold nil
    ;;       split-width-threshold 0)

  ;; never have trailing whitespace again
  ;; TODO put on idle timer instead of before-save-hook
  ;; (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
** emacs on mobile
*** modify HOME so files are where expected on mobile
#+begin_src emacs-lisp
  ;; *NOTE* must be at bottom or breaks other loading processes somehow
  ;; if we are in termux for android devices set HOME to sdcard
  ;; because that's where my org folder will be
  (when (file-exists-p "/data/data/com.termux/files/usr/bin/termux-info")
    (message "**NOTE** detected termux... automatically setting HOME for emacs")
    (setenv "HOME" "/data/data/com.termux/files/home/storage/shared"))
#+end_src
*** don't use symlinks with straight because of permission errors
#+begin_src emacs-lisp
  (when (file-exists-p "/data/data/com.termux/files/usr/bin/termux-info")
    (setq straight-use-symlinks nil))
#+end_src
** use straight package manager
#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
  (straight-use-package 'use-package)
#+end_src
** highlight our lines by default
#+begin_src emacs-lisp
(global-hl-line-mode +1)
#+end_src
** make the modeline nicer
*** the actual modeline
#+begin_src emacs-lisp
    ;; (defun shackra/task-clocked-time ()
    ;;   "Return a string with the clocked time and effort, if any"
    ;;   (interactive)
    ;;   (if (and org-mode-line-string (> (length org-mode-line-string) 3))
    ;;       (let* ((clocked-time (org-clock-get-clocked-time))
    ;;              (h (floor clocked-time 60))
    ;;              (m (- clocked-time (* 60 h)))
    ;;              (work-done-str (org-minutes-to-clocksum-string m))
    ;;              (heading-length-or-forty (if (< 40 (length org-clock-heading)) 40 (length org-clock-heading)))
    ;;              (org-clock-heading-substring (substring org-clock-heading 0 heading-length-or-forty))
    ;;              (maybe-add-ellipses-to-heading (if (< 40 (length org-clock-heading))  (format "%s..." org-clock-heading-substring) org-clock-heading-substring))
    ;;              ;; TODO only add elllipses if string longer than 40
    ;;              (clock-heading-summarized maybe-add-ellipses-to-heading )
    ;;              )
    ;;         (if org-clock-effort
    ;;             (let* ((effort-in-minutes
    ;;                     (org-duration-string-to-minutes org-clock-effort))
    ;;                    (effort-h (floor effort-in-minutes 60))
    ;;                    (effort-m (- effort-in-minutes (* effort-h 60)))
    ;;                    (effort-str (org-minutes-to-clocksum-string effort-m)))
    ;;               (format " [%s/%s (%s)]  " work-done-str effort-str clock-heading-summarized))
    ;;           (format " [%s (%s)]   " work-done-str clock-heading-summarized)))
    ;;     ""))

  (with-eval-after-load 'subr-x
    (setq-default mode-line-buffer-identification
                  '(:eval (format-mode-line (propertized-buffer-identification (or (when-let* ((buffer-file-truename buffer-file-truename)
                                                                                               (prj (cdr-safe (project-current)))
                                                                                               (prj-parent (file-name-directory (directory-file-name (expand-file-name prj)))))
                                                                                     (concat (file-relative-name (file-name-directory buffer-file-truename) prj-parent) (file-name-nondirectory buffer-file-truename)))
                                                                                   "%b"))))))

    (setq-default mode-line-format
                  (list
                   " " mode-line-modified
                   ;; day and time
                   '(:eval (propertize (format-time-string "  %b %d %R ")
                                       'face 'font-lock-builtin-face))

                   ;; '(:eval (propertize (substring vc-mode 5)
                   ;;                     'face 'font-lock-comment-face))

                   ;; line and column
                   ;; " (" ;; '%02' to set to 2 chars at least; prevents flickering
                   mode-line-buffer-identification
                   ;; (propertize "%02l" 'face 'font-lock-keyword-face) ","
                   ;; (propertize "%02c" 'face 'font-lock-keyword-face)
                   ;; ") "

                 ;; '(:eval (propertize (shackra/task-clocked-time)
                 ;;                     'face 'font-lock-builtin-face))

                   ;; '(:eval (propertize (shackra/task-clocked-time)
                   ;;                     'face 'font-lock-builtin-face))
                   ;; '(:eval (propertize (substring org-mode-line-string 1)
                   ;;                     'face 'font-lock-builtin-face))

                   ;; spaces to align right
                   ;; '(:eval (propertize
                   ;;          " " 'display
                   ;;          `((space :align-to (- (+ right right-fringe right-margin)
                   ;;                                ,(+ 3 (string-width mode-name)))))))

                   ;; the current major mode
                   (propertize " %m " 'face 'font-lock-string-face)
                   ;;minor-mode-alist
                   ;;  (propertize minor-mode-list 'face 'font-lock-string-face)
                   ))
#+end_src
*** some hooks to keep info accurate
#+begin_src emacs-lisp
  (add-hook 'org-clock-in-hook
            '(lambda ()
               (force-mode-line-update)))
  (add-hook 'org-clock-cancel-hook
            '(lambda ()
               (setq org-mode-line-string nil)
               (force-mode-line-update)))
  (add-hook 'org-clock-out-hook
            '(lambda ()
               (setq org-mode-line-string nil)
               (force-mode-line-update)))
#+end_src
* Ensure critical environment specific files exist
** load bash profile (most for env vars)
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :init (setq exec-path-from-shell-variables '("PATH" "MANPATH" "EMACSFOR"))
    :config
    (exec-path-from-shell-initialize))
#+end_src
** Ensure work.el exists and we can load it
*** why?
**** lots of work specific snippets, authinfo, etc needs to be loaded for emacs for work tot be loaded as we expect it
*** try loading it
#+begin_src emacs-lisp
  (when (string-equal nil (getenv "TRAVIS_OS_NAME"))
    (pcase (getenv "EMACSFOR")
      ("WORK" (load (expand-file-name "work.el" "~")))
      ("PERSONAL" (load (expand-file-name "personal.el" "~")))
      (_ (error "Please set the EMACSFOR variable to WORK or PERSONAL"))))
#+end_src
** ensure personal.el and personal org files are added above
* Setup keybindings with general
#+begin_src emacs-lisp
  (use-package general
    :init
    (defun my-day-org-agenda ()
      (interactive)
      (let ((org-agenda-span 'day))
        (org-agenda nil "a")
        (progn (switch-to-buffer "*Org Agenda*") (delete-other-windows))
        ))
    :config
    (general-evil-setup)
    (general-imap "j"
      (general-key-dispatch 'self-insert-command
        :timeout 0.25
        ;; TODO make this work so jf writes the file when I enter normal mode
        ;; "j" '(my-write-then-normal-state)
        "f" 'evil-normal-state))

    ;; TODO review if this is good or not
    (general-nmap "/" 'evil-search-forward) ;; TODO can we modify this so that the search is done by rg?
    ;; TODO upgrade to helm-rg-this-file

    ;; TODO do we just want to use alphappas https://github.com/alphapapa/helm-swish/blob/master/helm-swish.el ???
    ;; https://github.com/cosmicexplorer/helm-rg/issues/12
    ;; (general-nmap "/" 'helm-ag-this-file) ;; doesn't have swoop like functionality

    (general-unbind 'org-agenda-mode-map
      "SPC")

    ;; (general-create-definer my-leader-def2
    ;;     :prefix "SPC")

    (general-create-definer my-leader-def
      :prefix "C")

    ;; (my-leader-def
    ;;   :states '(normal visual emacs motion)
    ;;   :prefix "SPC"
    ;;   :keymaps 'override
    ;;   "u"   '(evil-scroll-up :which-key "evil scroll up"))


    (my-leader-def
      :states '(normal visual emacs motion)
      :prefix "SPC"
      :keymaps 'override
      :non-normal-prefix "M-SPC"
      "u"   '(universal-argument :which-key "universal-argument")
      "pg"   '(helm-projectile-ag :which-key "ag project")
      "<tab>" '(switch-to-prev-buffer :which-key "previous buffer")
      "SPC" '(helm-M-x :which-key "M-x")
      "tf" '(spacemacs/toggle-frame-fullscreen-non-native :which-key "Full Screen")
      "pf"  '(helm-projectile-find-dwim :which-key "find files")
      "jc"  '(avy-goto-char :which-key "Jump To Char")
      "jj"  '(avy-goto-char-timer :which-key "Jump To Char")
      "ji"  '(avy-goto-char-in-line :which-key "Jump To Char In Line")
      "jl"  '(avy-goto-line :which-key "Jump To line")
      "pp"  '(helm-projectile-switch-project :which-key "switch project")
      "pb"  '(helm-projectile-switch-to-buffer :which-key "switch buffer")
      "pr"  '(helm-show-kill-ring :which-key "show kill ring")
      ;; applications (TODO maybe consider making =ao= variants of org again here)
      "ad"  '(dired :which-key "open dired")
      "iu" '(my/org-web-tools-insert-link-for-url :which-key "insert link for url in clipboard")
      "oo"  '(org-agenda :which-key "open org agenda") ;; previously aoo
      "od"  '(my-day-org-agenda :which-key "open todays org agenda")
      "oa"  '(org-agenda-list :which-key "open org agenda list") ;; previously aoa
      "ol"  '(org-store-link :which-key "store org link") ;; previously aol
      "os"  '(org-mru-clock-in :which-key "clock into recently clocked task") ;; previously aorr
      "or"  '(helm-org-rifle :which-key "helm org rifle") ;; previously aorr
      ;; "oh"  '(org-recent-headings :which-key "org recent headings")
      ;; rifle current buffer
      ;; rifle directories
      ;; rifle files

      ;; c
      "cc"  '(helm-org-capture-templates :which-key "org-capture")

      ;; E (ediff)
      "Eb"  '(ediff-buffers :which-key "ediff buffers")
      ;; magit
      "gb" '(magit-blame :which-key "magit blame")
      "gf" '(magit-find-file :which-key "magit find-file")
      "gg" '(helm-do-grep-ag :which-key "helm ag (rg)")
      "gl" '(magit-log-buffer-file :which-key "magit log file")
      "gs" '(magit-status :which-key "magit status")
      "gt" '(magit-log-trace-definition :which-key "magit trace definition")
      "hg" '(helm-mark-ring :which-mode "helm mark ring (where was I?)")
      "hr" '(helm-resume :which-mode "helm resume")
      ;; help
      "hdm" '(describe-mode :which-mode "describe mode")
      ;; TODO might need to move these into helpful use-package :config
      "hdk" '(helpful-key :which-key "describe key")
      "hdv" '(helpful-variable :which-key "describe variable")
      "hdf" '(helpful-callable :which-key "describe function")
      "hdd" '(helm-apropos :which-key "apropos at point")
      ;; Buffers
      "bb"  '(helm-mini :which-key "buffers list")
      ;; "bs"  '(my-switch-to-scratch-buffer :which-key "scratch buffer")
      ;; "bs"  '((switch-to-buffer "*scratch*") :which-key "scratch buffer")
      "bd"  '(spacemacs/kill-this-buffer :which-key "kill-this-buffer")
      ;; Search
      "sS"  '(helm-swoop :which-key "helm-swoop")
      "ss"  '(spacemacs/helm-swoop-region-or-symbol :which-key "helm-swoop-region-or-symbol")
      ;; Window
      ;; TODO install winum (https://github.com/deb0ch/emacs-winum) and use emacs keybindings
      ;; so I can navigate with SPC N

      ;; TODO whats difference between windmove and evil-windowmove????
      ;; "wl"  '(windmove-right :which-key "move right")
      ;; "wm"  '(toggle-maximize-buffer :which-key "maximize buffer")
      ;; "wd"  '(delete-window :which-key "delete window")
      ;; "wh"  '(windmove-left :which-key "move left")
      ;; "wk"  '(windmove-up :which-key "move up")
      ;; "wj"  '(windmove-down :which-key "move bottom")
      "wl"  '(evil-window-move-far-right :which-key "move right")
      "wm"  '(toggle-maximize-buffer :which-key "maximize buffer")
      "wu"  '(winner-undo :which-key "winner undo")
      "wr"  '(winner-redo :which-key "winner redo")
      "wd"  '(delete-window :which-key "delete window")
      "wh"  '(evil-window-move-far-left :which-key "move left")
      "wk"  '(evil-window-move-very-top :which-key "move up")
      "wj"  '(evil-window-move-very-bottom :which-key "move bottom")

      "w/"  '(split-window-right :which-key "split right")
      "0" '(winum-select-window-0 :which-key "window 0")
      "1" '(winum-select-window-1 :which-key "window 1")
      "2" '(winum-select-window-2 :which-key "window 2")
      "3" '(winum-select-window-3 :which-key "window 3")
      "4" '(winum-select-window-4 :which-key "window 4")
      "5" '(winum-select-window-5 :which-key "window 5")
      "6" '(winum-select-window-6 :which-key "window 6")
      "7" '(winum-select-window-7 :which-key "window 7")
      "8" '(winum-select-window-8 :which-key "window 8")
      "9" '(winum-select-window-8 :which-key "window 9")
      "w-"  '(split-window-below :which-key "split bottom")
      "wx"  '(delete-window :which-key "delete window")
      "l"  '(tab-bar-select-tab :which-key "switch perspective")
      "qz"  '(delete-frame :which-key "delete frame")
      "qq"  '(save-buffers-kill-emacs :which-key "quit")
      ;; NeoTree
      "ft"  '(neotree-toggle :which-key "toggle neotree")
      ;; find files
      "ff"  '(helm-find-files :which-key "find files")
      ;; Others
      "at"  '(shell :which-key "open terminal")
      "ae"  '(eshell :which-key "open eshell")
      "cl" '(comment-line :which-key "comment line")
      "fed" '(find-dotfile :which-key "go to init.el")
      "tl" '(toggle-truncate-lines :which-key "truncate lines")
      ;; ehh not sure about this but okay
      "tw" '(whitespace-mode :which-key "show whitespace")
      ;; global org
      "ocj"  '(org-clock-goto :which-key "jump to current clock")
      "ocl"  '(org-clock-in-last :which-key "clock in last task")
      "o$"   '(my/org-refile-to-archive-datetree :which-key "archive to done.org datetree")

      ;; org refiling (takes top-level because i'll use it lots I think)
      "r"  '(org-refile :which-key "refile an org task")
      )
    (general-define-key
     "M-x" 'helm-M-x)
    ;; TODO are these the right modes???
    (general-evil-define-key '(normal visual) emacs-lisp-mode-map
      :prefix ","
      "ef" 'eval-defun :which-key "eval defun"
      "eb" 'eval-buffer :which-key "eval buffer"
      "er" 'eval-region :which-key "eval region")

    ;; TODO are these the right modes???
    (general-evil-define-key '(normal motion override visual) org-babel-map
      :prefix ","
      "x" 'emacs-version
      ;; "bt" 'org-babel-tangle :which-key "bable tangle" ;; that doesn't work
      "," 'org-ctrl-c-ctrl-c :which-key "execute babel block")


    (general-evil-define-key '(normal motion override) org-src-mode-map
      :prefix ","
      "," 'org-edit-special ;; doesn't work
      )

      (general-evil-define-key 'normal org-mode-map
        "RET" 'org-open-at-point :which-key "org open at point")

      (defun codygman/org-ctrl-c-and-go-to-result ()
        (org-ctrl-c-ctrl-c)
        (goto-char (org-babel-where-is-src-block-result)))

      (defun codygman/pad-then-insert-link ()
        ;; TODO this is too naieve and messes up modifying links (see heading I think I made)
        (interactive)
        (evil-insert 1)
        (insert "  ")
        (evil-normal-state)
        (call-interactively 'org-insert-link))

      (use-package org-download
        :after cl
        :config
        (setq org-image-actual-width nil) ;; think necessary for 500 to take effect
        (setq org-download-image-org-width 400)
        (setq org-download-annotate-function 'ignore)
        (setq org-download-annotate-function (lambda (_link) ""))

        (setq org-download-screenshot-method
              (case system-type (gnu/linux "import %s") (darwin "screencapture -i %s")))
        (setq-default org-download-image-dir "~/org/images/screenshots/")
        (add-hook 'dired-mode-hook 'org-download-enable))

      (general-evil-define-key 'normal org-mode-map
        :prefix ","
        "ds" 'org-schedule :which-key "schedule"
        "dd" 'org-deadline :which-key "schedule"

        "ci" 'org-clock-in :which-key "clock in"
        "co" 'org-clock-out :which-key "clock out"
        "cc" 'org-clock-cancel :which-key "clock cancel"
        "tt" 'org-todo :which-key "org todo"
        ;; "C-c C-c" 'codygman/org-ctrl-c-and-go-to-result :which-key "execute code block and go to result"

        "ts" 'org-download-screenshot :which-key "org download screenshot"

        ;; insert
        "iB" 'org-insert-structure-template :which-key "insert org block"
        "ib" 'insert-previous-src-block-below :which-key "insert previous org src block"
        "tc" 'org-table-create :which-key "org table create"
        "it" 'air-org-set-tags :which-key "org set tags"
        "is" 'my-org-insert-subheading :which-key "org insert subheading"
        "ic" 'yas-insert-snippet :which-key "insert yasnippet code"
        "iS" 'my-org-insert-subheading-then-normal :which-key "org insert subhead then normal"
        "il" 'codygman/pad-then-insert-link :which-key "org insert link"
        "ip" 'org-set-property :which-key "org set property"
        "ie" 'org-set-effort :which-key "org set effort"

        "sh" 'org-promote-subtree :which-key "promote subtree-left"
        "sj" 'org-move-subtree-down :which-key "subtree-down"
        "sk" 'org-move-subtree-up :which-key "subtree-up"
        "sl" 'org-demote-subtree :which-key "demote subtree-right"
        "sn" 'org-narrow-to-subtree :which-key "org narrow"
        "sN" 'widen :which-key "org widen"
        "sa" '(org-archive-subtree :which-key "org archive")
        "se" '(org-babel-execute-subtree :which-key "org babel execute subtree ")
        "sb" 'org-tree-to-indirect-buffer :which-key "org tree to indirect buffer"
        "sr"  '(org-refile :which-key "org refile")
        "#" 'org-update-statistics-cookies :which-key "org-update-statistics-cookies")

      (general-evil-define-key '(normal override motion) org-agenda-mode-map
        "D" 'org-agenda-day-view :which-key "day view"
        "L" 'org-agenda-log-mode :which-key "org agenda log mode"))
#+end_src
* Theme
:PROPERTIES:
:ID:       d8dd34aa-e42b-4269-a087-83348b380b26
:END:
#+begin_src emacs-lisp
  ;; (use-package doom-themes
  ;; :if (not window-system)
  ;; :config
  ;; (setq frame-background-mode 'dark)
  ;; (load-theme 'doom-one t)
  ;; )

  (use-package solarized-theme ;; doom-themes
    :defer t
    :if window-system
    :init
    (defun codygman/solarized-theme-modifications (&rest args)
      (set-cursor-color "#b58900")
      )
    (advice-add 'load-theme :after 'codygman/solarized-theme-modifications)
    ;; variable pitch prettier fonts for org mode, see: https://zzamboni.org/post/beautifying-org-mode-in-emacs/
    (set-face-attribute 'default nil :family "Source Code Pro" :height 160 :width 'normal)
    (set-face-attribute 'fixed-pitch nil :family "Source Code Pro" :height 140 :width 'normal)
    (set-face-attribute 'variable-pitch nil :family "Source Sans Pro" :height 160 :weight 'medium)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch) ;; here or org?
    ;; all org blocks should be fixed-width NOTE: For source-blocks ‘org-src-block-faces’ takes precedence.
    (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
    (load-theme 'solarized-dark t)
    :config
    (defun set-buffer-variable-pitch()
      (interactive)
      (variable-pitch-mode t)
      (setq line-spacing 3)
      )
    :hook ((eww-mode . set-buffer-variable-pitch) ;; not sure this one works
           (org-mode . set-buffer-variable-pitch)
           (Info-mode . set-buffer-variable-pitch)
           (markdown-mode . set-buffer-variable-pitch)
           )
    )
#+end_src
